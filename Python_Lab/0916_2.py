print("\n\nList Comprehensive")
l=[12,1,3,23,14,25,6,8,9]
l3=[]
for i in l:
    if i%2==0:
        l3.append(i)
print(l3)

l2=[i for i in l if i%2==0]
print(l2)

s="Vikram Dipak Rahane"
l=[c for c in s if c.isupper()]
print(l)

print("\n\n lambda Fn") #work with filter,map,reduce,sort
#filter(fn or none,iterable)
l=[12,1,3,23,14,25,6,8,9]
l1=list(filter(lambda x:x%2==0,l))
print(l1)
l1=tuple(filter(lambda x:x%2==0,l))
print(l1,"\n")

l1=list(filter(lambda x:x%2==0 and x<10,l))  #complicated condition
print(l1)

#filter() -it take care of looping and take only values which gives True for given condition
#         -so if we use filter then condition must return Boolean values
l=[12,1,3,23,14,25,6,8,9]
def f1(n):
    n+=10
    return n%2==0 and n>20
l1=list(filter(lambda x:f1(x),l))
print(l1)

# map() - if we want to make operation on every value
l=[1,2,3,4,5,6]
l1=[]

for i in l:
    i+=10
    l1.append(i)
print("\n",l1)

l2=[i+10 for i in l]
print(l1)

l3=list(map(lambda x:x+10,l))
print(l3)

# map() -it take care of looping and take all values and apply expression
#       -expression must gives value (may be Boolean)
def f1(n):
    return n%2==0
l4=list(map(lambda x:f1(x),l))
print("l4: ",l4)

s="pradhyumn"  #Take onle vowels from string
def f1(n):
    return True if n in ['a','e','i','o','u'] else False
l4=list(filter(lambda x:f1(x),s))
print("l4: ",l4)

#Reduce Fn  - Reduce Multiple value to one like-minimum,maximum,sum of all no
import functools
l=[12,1,3,23,14,25,6,8,9]
s=functools.reduce(lambda acc,num:acc+num,l) # lambda accumulator,value:
print(s)
print(sum(l))

s=functools.reduce(lambda acc,num:num if acc>num else acc,l)# Min value
print("Minimum Value: ",s)
s=functools.reduce(lambda acc,num:num if acc<num else acc,l)# Max value
print("Maximum Value: ",s)

lst=['Python','Pearl','Linux','OS']
s=functools.reduce(lambda acc,num:acc+num,lst)
print(s)

s=functools.reduce(lambda acc,num:num if len(acc)>len(num) else acc,lst)# Min Char
print("Minimum Char string: ",s)
s=functools.reduce(lambda acc,num:num if len(acc)<len(num) else acc,lst)# Max Char
print("Maximum Char string: ",s)

#Write a reduce function to find a string generated by concatenation 2nd and 3rd
# char of every string
s=functools.reduce(lambda acc,s: acc+s[1:3],lst,"")
print(s)

lst=[(1,"zzz",45),(0,"bbb",56),(5,"aaa",46)]
lst.sort()
print("\n\n",lst)
lst=[(1,"zzz",45),(0,"bbb",56),(5,"aaa",46)]
lst.sort(key=lambda x:x[1])
print(lst)
lst=[(1,"zzz",45),(0,"bbb",56),(5,"aaa",46)]
lst.sort(key=lambda x:x[1],reverse=True)
print(lst)
